// Pathtracer implementation for blocks / chunks

#version 460 core
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D screenOutput; // screen texture to then draw in pathtracer.vert and pathtracer.frag

uniform float colorOffset;

#define CHUNK_LENGTH 32
#define CHUNK_SIZE (CHUNK_LENGTH * CHUNK_LENGTH * CHUNK_LENGTH)

// All used block states will be in an array. FOR NOW, 0 is empty, 1 is a block

// Corresponds with BlockStatePathtraceIndices in block_indices.zig
// struct BlockStatePathtraceIndices {
//     uint indices[CHUNK_SIZE];
// };

// struct ChunkPathtraceData {
//     BlockStatePathtraceIndices blockStateIndices;
// };

// layout(std430, binding = 1) readonly buffer allChunks {
//     ChunkPathtraceData variable_array[];
// };

void main() {
    vec4 pixel = vec4(0, 0, 0, 1.0);
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

    ivec2 dims = imageSize(screenOutput);
    float x = -(float(pixelCoords.x * 2 - dims.x) / dims.x); // transforms to (-1.0, 1.0)
    float y = -(float(pixelCoords.y * 2 - dims.y) / dims.y); // transforms to (-1.0, 1.0)

    vec2 compressed = vec2((x + 1.0) / 4.0, (y + 1.0) / 4.0);
    imageStore(screenOutput, pixelCoords, vec4(compressed + colorOffset, 0.5, 1.0));

}

